package com.incede.Service.scheme.schemeGl;


import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.incede.Dto.scheme.schemGl.SchemeGlDTO;
import com.incede.Exception.BusinessException;
import com.incede.Model.scheme.schemeGl.SchemeGl;
import com.incede.Repository.scheme.schemeGl.SchemeGlRepository;
import com.incede.Response.response.responseBody.ResponseWrapper;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class SchemeGlService {

    private final SchemeGlRepository schemeGlRepository;

    public SchemeGlService(SchemeGlRepository schemeGlRepository) {
        this.schemeGlRepository = schemeGlRepository;
    }

    @Transactional
    public ResponseWrapper<SchemeGlDTO> saveOrUpdate(SchemeGlDTO dto) {
        try {
            // Map DTO to Entity
            SchemeGl entity = mapToEntity(dto);
            // Save the entity
            SchemeGl saved = schemeGlRepository.save(entity);

            // Map saved entity back to DTO
            SchemeGlDTO responseDto = mapToDto(saved);

            // Return success message based on operation type
            String message = (dto.getGlConfigId() == null)
                    ? "GL Config created successfully"
                    : "GL Config updated successfully";

            return new ResponseWrapper<>("success", responseDto, message);

        } catch (Exception e) {
            throw new BusinessException("Failed to save or update GL Config: " + e.getMessage());
        }
    }



    @Transactional
    public ResponseWrapper<Boolean> softDelete(Integer id, Integer updatedBy) {
        SchemeGl schemeGl = schemeGlRepository.findById(id)
                .orElseThrow(() -> new BusinessException("GL Config with ID " + id + " not found"));

        schemeGl.setIsActive(false);
        schemeGl.setUpdatedBy(updatedBy);
        schemeGlRepository.save(schemeGl);

        return new ResponseWrapper<>("success", true, "GL Config deleted successfully");
    }

    @Transactional(readOnly = true)
    public ResponseWrapper<List<SchemeGlDTO>> getAllActive() {
        List<SchemeGl> glList = schemeGlRepository.findByIsActiveTrue();

        if (glList.isEmpty()) {
            throw new BusinessException("No active GL Configs found");
        }

        List<SchemeGlDTO> dtos = glList.stream()
                .map(this::mapToDto)
                .collect(Collectors.toList());

        return new ResponseWrapper<>("success", dtos, "Active GL Configs fetched successfully");
    }

    @Transactional(readOnly = true)
    public ResponseWrapper<SchemeGlDTO> getById(Integer id) {
        SchemeGl schemeGl = schemeGlRepository.findById(id)
                .orElseThrow(() -> new BusinessException("GL Config with ID " + id + " not found"));

        return new ResponseWrapper<>("success", mapToDto(schemeGl), "GL Config fetched successfully");
    }

    private SchemeGl mapToEntity(SchemeGlDTO dto) {
        SchemeGl entity = new SchemeGl();

        entity.setTenantId(dto.getTenantId());
        entity.setSchemeId(dto.getSchemeId());
        entity.setGlAccountType(dto.getGlAccountType());
        entity.setGlAccountId(dto.getGlAccountId());
        entity.setIsActive(dto.getIsActive() != null ? dto.getIsActive() : true);
        entity.setIdentity(dto.getIdentity());

        if (dto.getGlConfigId() != null) {
            entity.setUpdatedBy(dto.getUpdatedBy()); // For update
        } else {
            entity.setCreatedBy(dto.getCreatedBy()); // For create
        }

        return entity;
    }


    private SchemeGlDTO mapToDto(SchemeGl entity) {
        return new SchemeGlDTO(
                entity.getGlConfigId(),
                entity.getTenantId(),
                entity.getSchemeId(),
                entity.getGlAccountType(),
                entity.getGlAccountId(),
                entity.getIdentity(),
                entity.getIsActive()
                entity.getCreatedBy(),
                entity.getUpdatedBy()
        );
    }
}
