package com.incede.Service.nationality.nationalityStatus;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.incede.Dto.nationality.nationalitystatus.NationalityDTO;
import com.incede.Exception.BusinessException;
import com.incede.Model.nationality.nationalityStatus.Nationality;
import com.incede.Repository.nationality.nationalityStatus.NationalityRepository;
import com.incede.Response.response.responseBody.ResponseWrapper;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class NationalityService {

    private final NationalityRepository nationalityRepository;

    public NationalityService(NationalityRepository nationalityRepository) {
        this.nationalityRepository = nationalityRepository;
    }

    // Convert Nationality entity to DTO
    private NationalityDTO toDto(Nationality nationality) {
        NationalityDTO dto = new NationalityDTO();
        dto.setNationalityId(nationality.getNationalityId());
        dto.setNationality(nationality.getNationality());
        dto.setIsActive(nationality.getIsActive());
        dto.setTenantId(nationality.getTenantId());
        return dto;
    }

    // Convert NationalityDTO to entity
    private Nationality toEntity(NationalityDTO dto) {
        Nationality nationality;

        if (dto.getNationalityId() != null) {
            // Update existing entity
            nationality = nationalityRepository.findById(dto.getNationalityId())
                    .orElseThrow(() -> new BusinessException("Nationality not found for update"));

            // Set the updatedBy field for update operation
            nationality.setUpdatedBy(dto.getNationalityId()); // Assuming the DTO contains updatedBy
        } else {
            // Create new entity
            nationality = new Nationality();

            // Ensure that createdBy is provided in the DTO or from the current user context
            if (dto.getCreatedBy() == null) {
                throw new BusinessException("CreatedBy cannot be null for new Nationality.");
            }
            nationality.setCreatedBy(dto.getCreatedBy()); // Set createdBy for the new entity
            nationality.setIsActive(true); // Default value for isActive if not provided
        }

        // Common fields for both create and update operations
        nationality.setTenantId(dto.getTenantId());
        nationality.setNationality(dto.getNationality());
        nationality.setIsActive(dto.getIsActive() != null ? dto.getIsActive() : true);

        return nationality;
    }

    // Get all active nationalities
    @Transactional(readOnly = true)
    public ResponseWrapper<List<NationalityDTO>> getAllNationalities() {
        List<NationalityDTO> nationalities = nationalityRepository.findByIsActiveTrue().stream()
                .map(this::toDto)
                .collect(Collectors.toList());

        return new ResponseWrapper<>("success", nationalities, "Nationalities fetched successfully");
    }

    // Get nationality by ID
    @Transactional(readOnly = true)
    public ResponseWrapper<NationalityDTO> getNationalityById(Integer id) {
        Nationality nationality = nationalityRepository.findById(id)
                .orElseThrow(() -> new BusinessException("Nationality not found with ID: " + id));

        NationalityDTO nationalityDTO = toDto(nationality);

        return new ResponseWrapper<>("success", nationalityDTO, "Nationality fetched successfully");
    }

    // Create or Update nationality
    @Transactional
    public ResponseWrapper<Nationality> createOrUpdateNationality(NationalityDTO dto) {
        // Validate the fields of the DTO
        validateFields(dto);

        if (dto.getNationalityId() != null) {
            // Update existing nationality
            Nationality existingNationality = nationalityRepository.findById(dto.getNationalityId())
                    .orElseThrow(() -> new BusinessException("Nationality not found with ID: " + dto.getNationalityId()));

            // Check if the nationality name already exists for the tenant
            if (!existingNationality.getNationality().equalsIgnoreCase(dto.getNationality())) {
                boolean exists = nationalityRepository.existsByTenantIdAndNationality(dto.getTenantId(), dto.getNationality());
                if (exists) {
                    throw new BusinessException("Nationality name already exists for this tenant.");
                }
            }

            // Set updated nationality details using toEntity method
            existingNationality = toEntity(dto);
            return new ResponseWrapper<>("success", nationalityRepository.save(existingNationality), "Nationality updated successfully");
        }

        // Create new nationality if the ID is null
        boolean exists = nationalityRepository.existsByTenantIdAndNationality(dto.getTenantId(), dto.getNationality());
        if (exists) {
            throw new BusinessException("Nationality already exists for this tenant.");
        }

        Nationality nationality = toEntity(dto);
        return new ResponseWrapper<>("success", nationalityRepository.save(nationality), "Nationality created successfully");
    }

    // Soft delete nationality (Set isActive to false)
    @Transactional
    public ResponseWrapper<String> deleteNationality(Integer id) {
        Nationality nationality = nationalityRepository.findById(id)
                .orElseThrow(() -> new BusinessException("Cannot delete. Nationality not found with ID: " + id));

        nationality.setIsActive(false);
        nationalityRepository.save(nationality); // Soft delete

        return new ResponseWrapper<>("success", "Nationality deleted successfully", "Nationality deleted");
    }

    // Get nationalities by tenant ID
    @Transactional
    public List<NationalityDTO> getByTenantId(Integer tenantId) {
        List<Nationality> nationalities = nationalityRepository.findByTenantIdAndIsActiveTrue(tenantId);
        return nationalities.stream().map(this::toDto).collect(Collectors.toList());
    }

    // Validate fields in NationalityDTO
    private void validateFields(NationalityDTO dto) {
        try {
            // Iterate over all fields in the NationalityDTO class
            for (java.lang.reflect.Field field : NationalityDTO.class.getDeclaredFields()) {
                field.setAccessible(true);
                Object value = field.get(dto);

                // Skip nationalityId or any other fields that shouldn't be validated
                if (field.getName().equals("nationalityId")) continue;

                // Check for null or empty values
                if (value == null) {
                    throw new BusinessException(capitalize(field.getName()) + " must not be null");
                }

                if (value instanceof String && ((String) value).trim().isEmpty()) {
                    throw new BusinessException(capitalize(field.getName()) + " must not be empty");
                }
            }

            // Check if CreatedBy is null for new records (e.g., when nationalityId is null)
            if (dto.getNationalityId() == null && dto.getCreatedBy() == null) {
                throw new BusinessException("CreatedBy must not be null for new records");
            }
        } catch (IllegalAccessException e) {
            throw new BusinessException("Validation error: " + e.getMessage());
        }
    }

    // Capitalize the first letter of a field name
    private String capitalize(String fieldName) {
        if (fieldName == null || fieldName.isEmpty()) return fieldName;
        return Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);
    }
}
